# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.images import Images  # noqa: F401,E501
from swagger_server import util


class Character(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, name_kanji: str=None, nicknames: List[str]=None, rarity: int=None, gender: str=None, images: Images=None, media_id: List[str]=None):  # noqa: E501
        """Character - a model defined in Swagger

        :param id: The id of this Character.  # noqa: E501
        :type id: str
        :param name: The name of this Character.  # noqa: E501
        :type name: str
        :param name_kanji: The name_kanji of this Character.  # noqa: E501
        :type name_kanji: str
        :param nicknames: The nicknames of this Character.  # noqa: E501
        :type nicknames: List[str]
        :param rarity: The rarity of this Character.  # noqa: E501
        :type rarity: int
        :param gender: The gender of this Character.  # noqa: E501
        :type gender: str
        :param images: The images of this Character.  # noqa: E501
        :type images: Images
        :param media_id: The media_id of this Character.  # noqa: E501
        :type media_id: List[str]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'name_kanji': str,
            'nicknames': List[str],
            'rarity': int,
            'gender': str,
            'images': Images,
            'media_id': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'name_kanji': 'nameKanji',
            'nicknames': 'nicknames',
            'rarity': 'rarity',
            'gender': 'gender',
            'images': 'images',
            'media_id': 'media_id'
        }
        self._id = id
        self._name = name
        self._name_kanji = name_kanji
        self._nicknames = nicknames
        self._rarity = rarity
        self._gender = gender
        self._images = images
        self._media_id = media_id

    @classmethod
    def from_dict(cls, dikt) -> 'Character':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Character of this Character.  # noqa: E501
        :rtype: Character
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Character.


        :return: The id of this Character.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Character.


        :param id: The id of this Character.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Character.


        :return: The name of this Character.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Character.


        :param name: The name of this Character.
        :type name: str
        """

        self._name = name

    @property
    def name_kanji(self) -> str:
        """Gets the name_kanji of this Character.


        :return: The name_kanji of this Character.
        :rtype: str
        """
        return self._name_kanji

    @name_kanji.setter
    def name_kanji(self, name_kanji: str):
        """Sets the name_kanji of this Character.


        :param name_kanji: The name_kanji of this Character.
        :type name_kanji: str
        """

        self._name_kanji = name_kanji

    @property
    def nicknames(self) -> List[str]:
        """Gets the nicknames of this Character.


        :return: The nicknames of this Character.
        :rtype: List[str]
        """
        return self._nicknames

    @nicknames.setter
    def nicknames(self, nicknames: List[str]):
        """Sets the nicknames of this Character.


        :param nicknames: The nicknames of this Character.
        :type nicknames: List[str]
        """

        self._nicknames = nicknames

    @property
    def rarity(self) -> int:
        """Gets the rarity of this Character.


        :return: The rarity of this Character.
        :rtype: int
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity: int):
        """Sets the rarity of this Character.


        :param rarity: The rarity of this Character.
        :type rarity: int
        """

        self._rarity = rarity

    @property
    def gender(self) -> str:
        """Gets the gender of this Character.


        :return: The gender of this Character.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this Character.


        :param gender: The gender of this Character.
        :type gender: str
        """

        self._gender = gender

    @property
    def images(self) -> Images:
        """Gets the images of this Character.


        :return: The images of this Character.
        :rtype: Images
        """
        return self._images

    @images.setter
    def images(self, images: Images):
        """Sets the images of this Character.


        :param images: The images of this Character.
        :type images: Images
        """

        self._images = images

    @property
    def media_id(self) -> List[str]:
        """Gets the media_id of this Character.


        :return: The media_id of this Character.
        :rtype: List[str]
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id: List[str]):
        """Sets the media_id of this Character.


        :param media_id: The media_id of this Character.
        :type media_id: List[str]
        """

        self._media_id = media_id
